package rules

//list any import classes here.
import com.sbnz.helpers.Utility;
import com.sbnz.model.RegisteredUser;
import com.sbnz.model.Destination;
import com.sbnz.model.Category;
import com.sbnz.model.Hotel;
import com.sbnz.dto.SearchDTO;
import com.sbnz.dto.EventDTO;
import com.sbnz.dto.DestinationEventsDTO;
import com.sbnz.model.LocalFood;
import com.sbnz.model.Transportation;
import java.util.Date;

rule "Add points to destinations with upcoming events (type observances)"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO(startDate == null, endDate == null)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOfObservances: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "observances", $startDate: start, $startDate > (new Date()), $startDate < (Utility.workWithDates(new Date(), "+", 2, 1))) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "city") from $interests,
        			 $cityCategory: collectList( $c ))
        			 
       eval($cityCategory.size() > 0)
       eval($numberOfObservances > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (city category):  "+$destination.getName());	
       
end


rule "Add points to destinations with upcoming events (type politics)"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO(startDate == null, endDate == null)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOfPolitics: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "politics", $startDate: start, $startDate > (new Date()), $startDate < (Utility.workWithDates(new Date(), "+", 2, 1))) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "history") from $interests,
        			 $historyCategory: collectList( $c ))
        			 
       eval($historyCategory.size() > 0)
       eval($numberOfPolitics > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (history category):  "+$destination.getName());	
       
end


rule "Add points to destinations with upcoming events (type concerts)"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO(startDate == null, endDate == null)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOConcerts: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "concerts" || $c=="festivals", $startDate: start, $startDate > (new Date()), $startDate < (Utility.workWithDates(new Date(), "+", 2, 1))) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "concerts" || name == "night life") from $interests,
        			 $concertsCategory: collectList( $c ))
        			 
       eval($concertsCategory.size() > 0)
       eval($numberOConcerts > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (concerts category):  "+$destination.getName());	
       
end


rule "Add points to destinations with upcoming events (type performing-arts)"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO(startDate == null, endDate == null)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($value: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "perfroming-arts", $startDate: start, $startDate > (new Date()), $startDate < (Utility.workWithDates(new Date(), "+", 2, 1))) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "museums") from $interests,
        			 $museumsCategory: collectList( $c ))
        			 
       eval($museumsCategory.size() > 0)
       eval($value > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (city category):  "+$destination.getName());	
       
end


rule "Add points to destinations with upcoming events (type sports)"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO(startDate == null, endDate == null)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOfSports: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "sports", $startDate: start, $startDate > (new Date()), $startDate < (Utility.workWithDates(new Date(), "+", 2, 1))) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "hiking" || name == "adventure" || name == "sailing") from $interests,
        			 $sportsCategory: collectList( $c ))
        			 
       eval($sportsCategory.size() > 0)
       eval($numberOfSports > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (sports category):  "+$destination.getName());	
       
end

rule "Add points to destinations with upcoming events (type sports) date selected"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO($startFilter: startDate , $endFilter: endDate)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOfSports: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "sports", $startDate: start, $endDate: endD,  $startDate > $startFilter, $startDate < $endFilter, $endDate < $endFilter) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "hiking" || name == "adventure" || name == "sailing") from $interests,
        			 $sportsCategory: collectList( $c ))
        			 
       eval($sportsCategory.size() > 0)
       eval($numberOfSports > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (sports category): date selected "+$destination.getName());	
       
end

rule "Add points to destinations with upcoming events (type performing-arts) date selected"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO($startFilter: startDate , $endFilter: endDate)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($value: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "performing-arts", $startDate: start, $endDate: endD,  $startDate > $startFilter, $startDate < $endFilter, $endDate < $endFilter) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "museums") from $interests,
        			 $museumsCategory: collectList( $c ))
        			 
       eval($museumsCategory.size() > 0)
       eval($value > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (city category): date selected "+$destination.getName());	
       
end

rule "Add points to destinations with upcoming events (type observances) date selected"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO($startFilter: startDate , $endFilter: endDate)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOfObservances: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "observances", $startDate: start, $endDate: endD,  $startDate > $startFilter, $startDate < $endFilter, $endDate < $endFilter) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "city") from $interests,
        			 $cityCategory: collectList( $c ))
        			 
       eval($cityCategory.size() > 0)
       eval($numberOfObservances > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (city category): date selected "+$destination.getName());	
       
end


rule "Add points to destinations with upcoming events (type politics) date selected"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO($startFilter: startDate , $endFilter: endDate)  
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOfPolitics: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "politics", $startDate: start, $endDate: endD,  $startDate > $startFilter, $startDate < $endFilter, $endDate < $endFilter) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "history") from $interests,
        			 $historyCategory: collectList( $c ))
        			 
       eval($historyCategory.size() > 0)
       eval($numberOfPolitics > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (history category) date selected:  "+$destination.getName());	
       
end


rule "Add points to destinations with upcoming events (type concerts) date selected"
    agenda-group "events"
    no-loop true
	lock-on-active true
    when
        $search: SearchDTO($startFilter: startDate , $endFilter: endDate) 
        $destination: Destination($name: name, trending == false)
        $user: RegisteredUser($interests: interests)
        $destinationEvents: DestinationEventsDTO($dest: destination, $dest.name == $name, $events: events)
        
        Number($numberOConcerts: intValue >= 1) from accumulate(
        	EventDTO($c: category, $c == "concerts" || $c == "festivals", $startDate: start, $endDate: endD,  $startDate > $startFilter, $startDate < $endFilter, $endDate < $endFilter) from $events,
        	count($c)
        )
        
        accumulate(Category( $c: this , name == "concerts" || name == "night life") from $interests,
        			 $concertsCategory: collectList( $c ))
        			 
       eval($concertsCategory.size() > 0)
       eval($numberOConcerts > 1)
    
    then
		modify($destination) {
			setTrending(true);	
		}
	    System.out.println("Trending destination (concerts category) date selected:  "+$destination.getName());	
       
end

rule "Add points to trending destinations"
    agenda-group "events"
    no-loop true
    when
        $destination: Destination(trending == true)
    then
    	modify($destination) {
			setScore($destination.getScore() + 5);	    
        }		
        	System.out.println("5 points goes to "+$destination.getName()+" for being trending destination");
end

query "Get trending destination" (Boolean $trending)
	$destinations: Destination(trending == $trending)
end

query "Get destinations with children discount" (Boolean $children) 
	$destinations: Destination($hotels: hotels)
	Number(intValue >= 1) from accumulate(
            $h: Hotel(childrenDiscount == true) from $hotels,
            count($h)
        )
end

query "Get destinations with selected category" (String category) 
	$destinations: Destination($categories: categories)
	Number(intValue >= 1) from accumulate(
            $c: Category(name == category) from $categories,
            count($c)
        )
end

query "Get destination with selected transportation type" (Transportation $transport)
	$destinations: Destination(transportation contains $transport)
end

query "Get mediterranean destinations" ()
	$destinations: Destination(locationLat > 31.0, locationLat < 45.0, locationLon > -6.0, locationLon < 36.0)
end

query "Get balkan destinations" ()
	$destinations: Destination(locationLat > 35.0, locationLat < 50.0, locationLon > 15.0, locationLon < 30.0)
end

query "Get eastern europe destinations" ()
	$destinations: Destination(locationLat > 45.0, locationLat < 65.0, locationLon > 27.0)
end

query "Get north europe destinations" ()
	$destinations: Destination(locationLat > 50.0, locationLat < 70.0, locationLon > -10.0, locationLon < 40.0)
end





